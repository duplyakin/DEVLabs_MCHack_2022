<?php

namespace App\Controller\Admin;

use App\Entity\Metric;
use App\Entity\User;
use App\Repository\MetricRepository;
use Doctrine\ORM\EntityManagerInterface;
use Doctrine\ORM\QueryBuilder;
use EasyCorp\Bundle\EasyAdminBundle\Collection\FieldCollection;
use EasyCorp\Bundle\EasyAdminBundle\Collection\FilterCollection;
use EasyCorp\Bundle\EasyAdminBundle\Config\Action;
use EasyCorp\Bundle\EasyAdminBundle\Config\Actions;
use EasyCorp\Bundle\EasyAdminBundle\Config\Assets;
use EasyCorp\Bundle\EasyAdminBundle\Config\Crud;
use EasyCorp\Bundle\EasyAdminBundle\Config\KeyValueStore;
use EasyCorp\Bundle\EasyAdminBundle\Context\AdminContext;
use EasyCorp\Bundle\EasyAdminBundle\Controller\AbstractCrudController;
use EasyCorp\Bundle\EasyAdminBundle\Dto\EntityDto;
use EasyCorp\Bundle\EasyAdminBundle\Dto\SearchDto;
use EasyCorp\Bundle\EasyAdminBundle\Event\AfterCrudActionEvent;
use EasyCorp\Bundle\EasyAdminBundle\Event\AfterEntityUpdatedEvent;
use EasyCorp\Bundle\EasyAdminBundle\Event\BeforeEntityUpdatedEvent;
use EasyCorp\Bundle\EasyAdminBundle\Field\AssociationField;
use EasyCorp\Bundle\EasyAdminBundle\Field\BooleanField;
use EasyCorp\Bundle\EasyAdminBundle\Field\Field;
use EasyCorp\Bundle\EasyAdminBundle\Field\IdField;
use EasyCorp\Bundle\EasyAdminBundle\Field\TextField;
use EasyCorp\Bundle\EasyAdminBundle\Orm\EntityRepository;
use EasyCorp\Bundle\EasyAdminBundle\Orm\EntityUpdater;
use EasyCorp\Bundle\EasyAdminBundle\Provider\AdminContextProvider;
use Symfony\Component\HttpFoundation\Response;

/**
 * Class MetricCrudController
 * @package App\Controller\Admin
 */
class MetricCrudController extends AbstractCrudController
{
    /**
     * @var EntityManagerInterface
     */
    private $entityManager;

    /**
     * MetricCrudController constructor.
     * @param EntityManagerInterface $entityManager
     */
    public function __construct(EntityManagerInterface $entityManager)
    {
        $this->entityManager = $entityManager;
    }

    /**
     * @return string
     */
    public static function getEntityFqcn(): string
    {
        return User::class;
    }

//    public function configureCrud(Crud $crud): Crud
//    {
//        return $crud;
//    }

    /**
     * @param Actions $actions
     * @return Actions
     */
    public function configureActions(Actions $actions): Actions
    {
        return $actions
            ->remove('index', 'edit')
            ->remove('index', 'delete');
    }

    /**
     * @param Assets $assets
     * @return Assets
     */
    public function configureAssets(Assets $assets): Assets
    {
        return $assets
            ->addJsFile('/assets/js/custom_fields.js');
    }

    /**
     * @param string $pageName
     * @return iterable
     */
    public function configureFields(string $pageName): iterable
    {
        return [
            IdField::new('id'),
            TextField::new('fullName'),
            TextField::new('email'),
            AssociationField::new('communities')
                ->setFormTypeOption('by_reference', false),
            AssociationField::new('answers')
                ->setFormTypeOption('by_reference', false),



//            IdField::new('id')
//                ->onlyOnIndex(),
//            IdField::new('fi')
//                ->onlyOnIndex(),
//            AssociationField::new('user')
//                ->setCssClass('first-name-table'),
//            Field::new('user.facebookLink')
//                ->setLabel(false)
//                ->setTemplatePath('admin/metric/fields/social-link.html.twig')
//                ->onlyOnIndex(),
//            Field::new('intro')
//                ->setTemplatePath('admin/metric/fields/number.html.twig'),
//            BooleanField::new('isFounder'),
//            BooleanField::new('isInvestor'),
//            BooleanField::new('isUsaEu'),
//            Field::new('socialRate')
//                ->onlyOnIndex(),
//            TextField::new('user.about')
//                ->onlyOnIndex(),
//            TextField::new('user.lookingFor')
//                ->onlyOnIndex(),
//            Field::new('user.answers')
//                ->onlyOnIndex()
//                ->setTemplatePath('admin/metric/fields/answers.html.twig'),
        ];
    }

//    public function createIndexQueryBuilder(SearchDto $searchDto, EntityDto $entityDto, FieldCollection $fields, FilterCollection $filters): QueryBuilder
//    {
//        parent::createIndexQueryBuilder($searchDto, $entityDto, $fields, $filters); // TODO: Change the autogenerated stub
//
//        /** @var MetricRepository $repository */
//        $repository = $this->entityManager->getRepository(Metric::class);
//        /** @var QueryBuilder $response */
//        $response = $this->get(EntityRepository::class)->createQueryBuilder($searchDto, $entityDto, $fields, $filters);
//        return $repository->getMargoQueryBuilder($response);
//    }

    /**
     * @param AdminContext $context
     * @return Response
     */
    public function ajaxEditAction(AdminContext $context)
    {
        if ($context->getRequest()->isXmlHttpRequest()) {
            $fieldName = $context->getRequest()->query->get('fieldName');
            $newValue = $context->getRequest()->query->get('newValue');

            $event = $this->ajaxEdit($context->getEntity(), $fieldName, $newValue);
            if ($event->isPropagationStopped()) {
                return $event->getResponse();
            }
            return new Response($newValue);
        }
    }

    /**
     * @param EntityDto $entityDto
     * @param null|string $propertyName
     * @param string $newValue
     * @return AfterCrudActionEvent
     */
    private function ajaxEdit(EntityDto $entityDto, ?string $propertyName, string $newValue): AfterCrudActionEvent
    {
        if (!$entityDto->hasProperty($propertyName)) {
            throw new \RuntimeException(sprintf('The "%s" boolean field cannot be changed because it doesn\'t exist in the "%s" entity.', $propertyName, $entityDto->getName()));
        }

        $this->get(EntityUpdater::class)->updateProperty($entityDto, $propertyName, $newValue);

        $event = new BeforeEntityUpdatedEvent($entityDto->getInstance());
        $this->get('event_dispatcher')->dispatch($event);
        $entityInstance = $event->getEntityInstance();

        $this->updateEntity($this->get('doctrine')->getManagerForClass($entityDto->getFqcn()), $entityInstance);

        $this->get('event_dispatcher')->dispatch(new AfterEntityUpdatedEvent($entityInstance));

        $entityDto->setInstance($entityInstance);

        $parameters = KeyValueStore::new([
            'action' => Action::EDIT,
            'entity' => $entityDto,
        ]);

        $event = new AfterCrudActionEvent($this->get(AdminContextProvider::class)->getContext(), $parameters);
        $this->get('event_dispatcher')->dispatch($event);

        return $event;
    }
}
