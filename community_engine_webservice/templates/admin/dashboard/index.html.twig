{% extends '@EasyAdmin/page/content.html.twig' %}

{% block page_title %}Welcome to MeetsUp Dashboard{% endblock %}

{% block page_content %}
    <style>
        * {
            box-sizing: border-box;
        }

        html, body {
            position: relative;
            width: 100%;
            height: 100%;
            font-family: Helvetica, Arial, sans-serif;
        }

        body {
            margin: 0;
            padding: 20px 10px;
        }

        .drag-container {
            position: fixed;
            left: 0;
            top: 0;
            z-index: 1000;
        }

        .board {
            position: relative;
        }

        .board-column {
            position: absolute;
            left: 0;
            top: 0;
            padding: 0 10px;
            width: calc(100% / 3);
            z-index: 1;
        }

        .board-column.muuri-item-releasing {
            z-index: 2;
        }

        .board-column.muuri-item-dragging {
            z-index: 3;
            cursor: move;
        }

        .board-column-container {
            position: relative;
            width: 100%;
            height: 100%;
        }

        .board-column-header {
            position: relative;
            height: 50px;
            line-height: 50px;
            overflow: hidden;
            padding: 0 20px;
            text-align: center;
            background: #333;
            color: #fff;
            border-radius: 5px 5px 0 0;
            font-weight: bold;
            letter-spacing: 0.5px;
            text-transform: uppercase;
        }

        @media (max-width: 600px) {
            .board-column-header {
                text-indent: -1000px;
            }
        }

        .board-column.todo .board-column-header {
            background: #4A9FF9;
        }

        .board-column.working .board-column-header {
            background: #f9944a;
        }

        .board-column.done .board-column-header {
            background: #2ac06d;
        }

        .board-column-content-wrapper {
            position: relative;
            padding: 8px;
            background: #f0f0f0;
            height: calc(100vh - 90px);
            overflow-y: auto;
            border-radius: 0 0 5px 5px;
        }

        .to-call-wrapper {
            height: auto !important;
        }

        .board-column-content {
            position: relative;
            min-height: 100%;
        }

        .to-call-content {
            min-height: 200px !important;
        }

        .board-item {
            position: absolute;
            width: calc(100% - 16px);
            margin: 8px;
        }

        .board-item.muuri-item-releasing {
            z-index: 9998;
        }

        .board-item.muuri-item-dragging {
            z-index: 9999;
            cursor: move;
        }

        .board-item.muuri-item-hidden {
            z-index: 0;
        }

        .board-item-content {
            position: relative;
            padding: 20px;
            background: #fff;
            border-radius: 4px;
            font-size: 17px;
            cursor: pointer;
            -webkit-box-shadow: 0px 1px 3px 0 rgba(0, 0, 0, 0.2);
            box-shadow: 0px 1px 3px 0 rgba(0, 0, 0, 0.2);
        }

        .match-button-wrapper {
            margin-top: 30px;
        }

        @media (max-width: 600px) {
            .board-item-content {
                text-align: center;
            }

            .board-item-content span {
                display: none;
            }
        }

        .image-cropper {
            width: 60px;
            height: 60px;
            position: relative;
            overflow: hidden;
            border-radius: 50%;
            float: left;
            margin-right: 10px;
        }

        .image-cropper img {
            display: inline;
            margin: 0 auto;
            height: 100%;
            width: auto;
        }

        .board-item-content .info {
            float: left;
        }

        .board-item-content {
            float: left;
            width: 100%;
        }

        .board-item-content .social {
            float: right;
        }

        .browser {
            display: block;
            position: fixed;
            top: 0;
            right: 0;
            height: 100%;
            width: 25%;
            z-index: 999;
            border: 1px solid #000;
        }

        .answers {
            font-size: 12px;
        }

        .social {
            position: absolute;
            top: 0;
            right: 5px;
        }
    </style>
    <div class="card card-body mb-3 ml-2 mr-2">
        <form method="post"
              action="{{ ea_url({showNullable: 0}).setController('App\\Controller\\Admin\\DashboardController').setAction('index') }}">
            <div class="form-group">
                <label style="flex: 0;" for="communitySelect">Community</label>
                <select name="communityId" id="communitySelect" class="form-control">
                    <option value="">Select Community</option>
                    {% for c in communities %}
                        <option {{ app.request.get('communityId') == c.getId() ? 'selected' }}
                                value="{{ c.getId() }}">{{ c.getTitle() }}</option>
                    {% endfor %}
                </select>
            </div>
            <div class="form-group">
                <button class="btn btn-primary mb-2" type="submit">Show</button>
            </div>
        </form>
    </div>
    <div class="drag-container"></div>
    <div class="board">
        <div class="board-column todo">
            <div class="board-column-container">
                <div class="board-column-header">Sorted users</div>
                <div class="board-column-content-wrapper">
                    <div class="board-column-content">
                        {% for user in users %}
                            {% include 'admin/dashboard/_user.html.twig' with {'user': user, 'questions': questions} only %}
                        {% endfor %}
                    </div>
                </div>
            </div>
        </div>
        <div class="board-column done">
            <div class="board-column-container">
                <div class="board-column-header">To call</div>
                <div class="board-column-content-wrapper to-call-wrapper">
                    <div data-gid="call" class="board-column-content to-call-content"></div>
                </div>
                <div class="match-button-wrapper">
                    <button id="save-users" class="btn btn-success btn-block btn-lg">Go daddy!</button>
                </div>
                <br/>
                <div class="board-column-header" style="background: #CCC;">Holded</div>
                <div class="board-column-content-wrapper" style="height: auto;">
                    <div data-gid="hold" class="board-column-content" style="min-height: 200px;">
                        {% for user in holdedUsers %}
                            {% include 'admin/dashboard/_user.html.twig' with {'user': user, 'questions': questions} only %}
                        {% endfor %}
                    </div>
                </div>
            </div>
        </div>
        <div class="board-column working">
            <div class="board-column-container">
                <div class="board-column-header">Related users</div>
                <div class="board-column-content-wrapper">
                    <div class="board-column-content to-match-user-container">

                    </div>
                </div>
            </div>
        </div>
    </div>
{% endblock %}

{% block body_javascript %}
    <script src="https://cdnjs.cloudflare.com/ajax/libs/web-animations/2.3.2/web-animations.min.js"></script>
    <script src="https://cdn.jsdelivr.net/gh/haltu/muuri@0.9.3/dist/muuri.min.js"></script>
    <script>
        var dragContainer = document.querySelector('.drag-container');
        var toCallWrapper = document.querySelector('.to-call-wrapper');
        var toCallContainer = document.querySelector('.to-call-content');
        var toMatchUserContainer = document.querySelector('.to-match-user-container');
        var saveButton = document.getElementById('save-users');
        var itemContainers = [].slice.call(document.querySelectorAll('.board-column-content'));
        var columnGrids = [];
        var boardGrid;
        var callGrid;
        var browserWindow;
        var lastgrid;

        // Init the column grids so we can drag those items around.
        itemContainers.forEach(function (container) {
            var grid = lastgrid = new Muuri(container, {
                items: '.board-item',
                dragEnabled: true,
                dragSort: function () {
                    return columnGrids;
                },
                dragContainer: dragContainer,
                dragAutoScroll: {
                    targets: (item) => {
                        return [
                            {element: window, priority: 0},
                            {element: item.getGrid().getElement().parentNode, priority: 1},
                        ];
                    }
                },
                dragStartPredicate: function (item, event) {
                    let link = elementMatches(event.target, '.to-open');
                    if (link) {
                        if (event.target.dataset.type === 'panel') {
                            loadPanelUrl(event.target.dataset.url);
                        } else if (event.target.dataset.type === 'answer') {
                            filter(event.target);
                        } else {
                            loadUrl(event.target.dataset.url);
                        }
                        return false;
                    }
                    return Muuri.ItemDrag.defaultStartPredicate(item, event);
                }
            })
                .on('dragInit', function (item) {
                    item.getElement().style.width = item.getWidth() + 'px';
                    item.getElement().style.height = item.getHeight() + 'px';
                })
                .on('dragReleaseEnd', function (item) {
                    item.getElement().style.width = '';
                    item.getElement().style.height = '';
                    item.getGrid().refreshItems([item]);
                    //
                    let type = item.getGrid().getElement().dataset.gid === 'hold' ? 'hold' : 'unhold';
                    let userId = item.getElement().dataset.id;
                    let response = fetch('/adm-z23db/hold-user/' + userId + '/' + type).then(response => response.json());
                    $('.board-item').css('opacity', 1);
                    if (item.getGrid().getElement().dataset.gid === 'call'){
                        inCall(userId);
                    }
                })
                .on('layoutStart', function () {
                    boardGrid.refreshItems().layout();
                })
                .on('add', function (items) {
                    grid.refreshItems();
                });


            if (container.classList.contains('to-call-content')) {
                callGrid = grid;
            }

            columnGrids.push(grid);
        });

        function inCall(id) {
            let response = fetch('/adm-z23db/in-call/' + id).then(response => response.json());
            $('.board-item[data-id=' + id + ']').css('opacity', 0.5);
            response.then((result) => {
                $('.board-item').css('opacity', 1);
                if (result.ids !== undefined) {
                    result.ids.forEach((v) => {
                        $('.board-item[data-id=' + v + ']').css('opacity', 0.5);
                    });
                }
            });
        }

        function elementMatches(element, selector) {
            var p = Element.prototype;
            return (p.matches || p.matchesSelector || p.webkitMatchesSelector || p.mozMatchesSelector || p.msMatchesSelector || p.oMatchesSelector).call(element, selector);

        }

        function filter(element) {
            toMatchUserContainer.innerHTML = 'Loading...';
            let response = fetch('/adm-z23db/filter-user/' + element.dataset.userId + '/' + element.dataset.answerId)
                .then(response => response.text());
            response.then((result) => {
                toMatchUserContainer.innerHTML = '';
                $(result).each((k, item) => {
                    lastgrid.add(item);
                });
            });
        }

        function loadUrl(url) {
            window.open(url, '_blank');
        }

        function loadPanelUrl(url) {
            let vpw = document.documentElement.clientWidth;
            browserWindow = window.open(url, 'BrowseModalWindows',
                'left=' + (vpw - screen.width * 0.3) + ',top=0,width='
                + (screen.width * 0.3) +
                ',height=' + screen.height + ',menubar=no'
            );
        }

        // Init board grid so we can drag those columns around.
        boardGrid = new Muuri('.board', {
            dragEnabled: true,
            dragHandle: '.board-column-header'
        });

        saveButton.onclick = () => {
            var ids = [];
            var xmlhttp = new XMLHttpRequest();
            saveButton.disabled = true;
            toCallWrapper.style.background = '#FDFFC0';
            [].forEach.call(toCallContainer.children, function (el) {
                ids.push(el.dataset.id);
            });
            xmlhttp.open("POST", '/adm-z23db/match/' + $('#communitySelect').val());
            xmlhttp.responseType = 'json';
            xmlhttp.setRequestHeader("Content-Type", "application/json;charset=UTF-8");
            xmlhttp.onload = () => {
                saveButton.disabled = false;
                if (xmlhttp.response && xmlhttp.response.status !== undefined && xmlhttp.response.status === 'success') {
                    toCallContainer.innerHTML = '';
                    callGrid.refreshItems().layout();
                    toCallWrapper.style.background = '#d0ffdb';
                    setTimeout(() => {
                        toCallWrapper.style.background = '#f0f0f0';
                    }, 1000);
                } else {
                    toCallWrapper.style.background = '#ff6969';
                    setTimeout(() => {
                        toCallWrapper.style.background = '#f0f0f0';
                    }, 1000);
                }
            };
            xmlhttp.send(JSON.stringify(ids));
        };
    </script>
{% endblock %}